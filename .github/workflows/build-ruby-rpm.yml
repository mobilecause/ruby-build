name: Build Ruby 3.0.7 RPM with OpenSSL 1.1

on:
  workflow_dispatch:
    inputs:
      architecture:
        description: 'Target architecture'
        required: false
        default: 'both'
        type: choice
        options:
          - both
          - x86_64
          - aarch64

jobs:
  build-rpm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - ${{ (github.event.inputs.architecture == 'both' || github.event.inputs.architecture == 'x86_64') && 'x86_64' || null }}
          - ${{ (github.event.inputs.architecture == 'both' || github.event.inputs.architecture == 'aarch64') && 'aarch64' || null }}
        exclude:
          - arch: null

    name: Build Ruby RPM (${{ matrix.arch }})

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Build Ruby RPM Docker image
        run: |
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            PLATFORM="linux/amd64"
            TAG_SUFFIX="x86"
          else
            PLATFORM="linux/arm64"
            TAG_SUFFIX="arm64"
          fi

          docker buildx build \
            --platform $PLATFORM \
            --load \
            -t ruby-builder-$TAG_SUFFIX \
            --build-arg TARGETARCH=${{ matrix.arch }} \
            .

      - name: Extract RPMs from container
        run: |
          mkdir -p output-${{ matrix.arch }}

          # Set correct tag suffix
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            TAG_SUFFIX="x86"
          else
            TAG_SUFFIX="arm64"
          fi

          # Get current user ID to fix permissions
          USER_ID=$(id -u)
          GROUP_ID=$(id -g)

          # Run container and extract files using the correct tag and proper permissions
          docker run --rm \
            --user root \
            -v $(pwd)/output-${{ matrix.arch }}:/output \
            ruby-builder-$TAG_SUFFIX bash -c "

            echo 'Container contents:'
            ls -la /home/builder/
            echo ''
            echo 'RPM build output:'
            ls -la /home/builder/output/ 2>/dev/null || echo 'No output directory found'
            echo 'RPMS directory:'
            ls -la /home/builder/rpmbuild/RPMS/ 2>/dev/null || echo 'No RPMS directory found'
            echo ''

            # Copy all RPMs from output directory
            if [ -d '/home/builder/output' ] && [ \$(find /home/builder/output -name '*.rpm' | wc -l) -gt 0 ]; then
              echo 'Copying RPMs from output directory...'
              cp /home/builder/output/*.rpm /output/ 2>/dev/null || true
              echo 'Copied RPMs from output directory'
            fi

            # Also copy from traditional RPM build locations as backup
            if [ -d '/home/builder/rpmbuild/RPMS' ]; then
              echo 'Copying from rpmbuild RPMS...'
              find /home/builder/rpmbuild/RPMS -name '*.rpm' -exec cp {} /output/ \; 2>/dev/null || true
            fi

            if [ -d '/home/builder/rpmbuild/SRPMS' ]; then
              echo 'Copying source RPMs...'
              find /home/builder/rpmbuild/SRPMS -name '*.rpm' -exec cp {} /output/ \; 2>/dev/null || true
            fi

            # Copy spec files if they exist
            if [ -f '/home/builder/rpmbuild/SPECS/ruby.spec' ]; then
              cp /home/builder/rpmbuild/SPECS/ruby.spec /output/ruby-modified.spec 2>/dev/null || true
              echo 'Copied modified spec'
            fi

            if [ -f '/home/builder/rpmbuild/SPECS/ruby.spec.bak' ]; then
              cp /home/builder/rpmbuild/SPECS/ruby.spec.bak /output/ruby-original.spec 2>/dev/null || true
              echo 'Copied original spec'
            fi

            # Fix ownership of copied files
            chown -R $USER_ID:$GROUP_ID /output/ 2>/dev/null || true

            echo ''
            echo 'Final output contents:'
            ls -la /output/
          "

      - name: List built RPMs
        run: |
          echo "Built RPMs for ${{ matrix.arch }}:"
          ls -la output-${{ matrix.arch }}/

          if [ $(find output-${{ matrix.arch }} -name '*.rpm' | wc -l) -gt 0 ]; then
            echo ""
            echo "RPM details:"
            for rpm in output-${{ matrix.arch }}/*.rpm; do
              if [ -f "$rpm" ]; then
                echo "=== $(basename $rpm) ==="
                rpm -qp --info "$rpm" 2>/dev/null || echo "Could not read RPM info for $rpm"
                echo ""
              fi
            done
          else
            echo "No RPM files found in output directory"
          fi

      - name: Upload RPM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ruby-3.0.7-rpms-${{ matrix.arch }}
          path: output-${{ matrix.arch }}/
          retention-days: 30
        if: always()

  summary:
    needs: build-rpm
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Create build summary
        run: |
          echo "# Ruby 3.0.7 RPM Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Built Packages" >> $GITHUB_STEP_SUMMARY

          for arch_dir in all-artifacts/ruby-3.0.7-rpms-*; do
            if [ -d "$arch_dir" ]; then
              arch=$(basename "$arch_dir" | sed 's/ruby-3.0.7-rpms-//')
              echo "### $arch Architecture" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              ls -la "$arch_dir"/ >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "## Key Features" >> $GITHUB_STEP_SUMMARY
          echo "- Ruby 3.0.7 compiled with OpenSSL 1.1.1w support" >> $GITHUB_STEP_SUMMARY
          echo "- Compatible with Amazon Linux 2023" >> $GITHUB_STEP_SUMMARY
          echo "- Includes all standard Ruby gems and libraries" >> $GITHUB_STEP_SUMMARY
          echo "- Debug packages available for troubleshooting" >> $GITHUB_STEP_SUMMARY

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ruby-3.0.7-all-rpms
          path: all-artifacts/
          retention-days: 30